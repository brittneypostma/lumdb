{"version":3,"sources":["logo.svg","components/Movie.jsx","components/MoviesList.jsx","components/MovieDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movie","movie","to","id","Poster","src","poster_path","alt","title","styled","img","MoviesList","useState","movies","setMovies","a","fetch","res","json","results","console","log","useEffect","fetchMovies","MovieGrid","map","key","div","MovieDetail","props","setMovie","match","params","MovieWrapper","backdrop","backdrop_path","MovieInfo","style","textDecoration","color","release_date","overview","App","className","logo","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,+WCM3C,IAUeC,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACZ,kBAAC,IAAD,CAAMC,GAAE,WAAMD,EAAME,KAClB,kBAAC,IAAD,CAAWA,GAAE,UAAKF,EAAME,KACtB,kBAACC,EAAD,CAAQC,IAAG,UALG,kCAKH,OAAmBJ,EAAMK,aAAeC,IAAKN,EAAMO,WAavDJ,EAASK,IAAOC,IAAV,K,4NCpBnB,IA4BeC,EA5BI,WAAO,IAAD,EACKC,mBAAS,IADd,mBAChBC,EADgB,KACRC,EADQ,iDAGvB,8BAAAC,EAAA,+EAEsBC,MAChB,8KAHN,cAEUC,EAFV,gBAKyBA,EAAIC,OAL7B,OAKUL,EALV,OAMIC,EAAUD,EAAOM,SANrB,kDAQIC,QAAQC,IAAR,MARJ,2DAHuB,sBAmBvB,OAJAC,qBAAU,YAfa,mCAgBrBC,KACC,IAGD,kBAACC,EAAD,KACGX,EAAOY,KAAI,SAAAxB,GAAK,OACf,kBAAC,EAAD,CAAOyB,IAAKzB,EAAME,GAAIF,MAAOA,SAQ/BuB,EAAYf,IAAOkB,IAAV,K,0bC5Bf,IA2CeC,EAxCK,SAAAC,GAAU,IAAD,EACDjB,mBAAS,IADR,mBACpBX,EADoB,KACb6B,EADa,KAkB3B,OAfAR,qBAAU,WAAM,4CACd,8BAAAP,EAAA,+EAEsBC,MAAM,sCAAD,OACiBa,EAAME,MAAMC,OAAO7B,GADpC,6DAF3B,cAEUc,EAFV,gBAKwBA,EAAIC,OAL5B,OAKUjB,EALV,OAMI6B,EAAS7B,GANb,kDAQImB,QAAQC,IAAR,MARJ,2DADc,uBAAC,WAAD,wBAYdE,KACC,CAACM,EAAME,MAAMC,OAAO7B,KAGrB,kBAAC8B,EAAD,CAAcC,SAAQ,UArBJ,mCAqBI,OAAqBjC,EAAMkC,gBAC/C,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAWjC,GAAE,UAAKF,EAAME,KACtB,kBAACC,EAAD,CACEC,IAAG,UA1BK,kCA0BL,OAAmBJ,EAAMK,aAC5BC,IAAKN,EAAMO,SAGf,6BACE,kBAAC,IAAD,CAAMN,GAAG,IAAImC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,SACnD,wCAEF,4BAAKtC,EAAMO,OACX,4BAAKP,EAAMuC,cACX,2BAAIvC,EAAMwC,cASdR,EAAexB,IAAOkB,IAAV,KAGE,SAAAE,GAAK,OAAIA,EAAMK,YAK7BE,EAAY3B,IAAOkB,IAAV,KCrBAe,EA/BH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAMzC,GAAG,KACP,yBAAKG,IAAKuC,IAAMD,UAAU,WAAWpC,IAAI,WAG7C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,OAAOC,UAAWnB,QCNpBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.5ff14181.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ff9a163f.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport Overdrive from 'react-overdrive'\r\n\r\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154'\r\n\r\nconst Movie = ({ movie }) => (\r\n  <Link to={`/${movie.id}`}>\r\n    <Overdrive id={`${movie.id}`}>\r\n      <Poster src={`${POSTER_PATH}${movie.poster_path}`} alt={movie.title} />\r\n    </Overdrive>\r\n  </Link>\r\n)\r\n\r\nexport default Movie\r\n\r\nMovie.propTypes = {\r\n  movie: PropTypes.shape({\r\n    title: PropTypes.string.isRequired\r\n  }).isRequired\r\n}\r\n\r\nexport const Poster = styled.img`\r\n  box-shadow: 0 0 35px black;\r\n`\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Movie from './Movie'\r\n\r\nconst MoviesList = () => {\r\n  const [movies, setMovies] = useState([])\r\n\r\n  async function fetchMovies() {\r\n    try {\r\n      const res = await fetch(\r\n        'https://api.themoviedb.org/3/discover/movie?api_key=bc4acb54059465fd1f379a49fecc7668&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1'\r\n      )\r\n      const movies = await res.json()\r\n      setMovies(movies.results)\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchMovies()\r\n  }, [])\r\n\r\n  return (\r\n    <MovieGrid>\r\n      {movies.map(movie => (\r\n        <Movie key={movie.id} movie={movie} />\r\n      ))}\r\n    </MovieGrid>\r\n  )\r\n}\r\n\r\nexport default MoviesList\r\n\r\nconst MovieGrid = styled.div`\r\n  display: grid;\r\n  padding: 1rem;\r\n  grid-template-columns: repeat(auto-fit, minmax(154px, 154px));\r\n  grid-gap: 2rem;\r\n  justify-content: center;\r\n`\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport Overdrive from 'react-overdrive'\r\nimport { Poster } from './Movie'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst POSTER_PATH = 'http://image.tmdb.org/t/p/w154'\r\nconst BACKDROP_PATH = 'http://image.tmdb.org/t/p/w1280'\r\n\r\nconst MovieDetail = props => {\r\n  const [movie, setMovie] = useState([])\r\n\r\n  useEffect(() => {\r\n    async function fetchMovies() {\r\n      try {\r\n        const res = await fetch(\r\n          `https://api.themoviedb.org/3/movie/${props.match.params.id}?api_key=bc4acb54059465fd1f379a49fecc7668&language=en-US`\r\n        )\r\n        const movie = await res.json()\r\n        setMovie(movie)\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    fetchMovies()\r\n  }, [props.match.params.id])\r\n\r\n  return (\r\n    <MovieWrapper backdrop={`${BACKDROP_PATH}${movie.backdrop_path}`}>\r\n      <MovieInfo>\r\n        <Overdrive id={`${movie.id}`}>\r\n          <Poster\r\n            src={`${POSTER_PATH}${movie.poster_path}`}\r\n            alt={movie.title}\r\n          />\r\n        </Overdrive>\r\n        <div>\r\n          <Link to='/' style={{ textDecoration: 'none', color: '#222' }}>\r\n            <h2>go back</h2>\r\n          </Link>\r\n          <h1>{movie.title}</h1>\r\n          <h3>{movie.release_date}</h3>\r\n          <p>{movie.overview}</p>\r\n        </div>\r\n      </MovieInfo>\r\n    </MovieWrapper>\r\n  )\r\n}\r\n\r\nexport default MovieDetail\r\n\r\nconst MovieWrapper = styled.div`\r\n  position: relative;\r\n  padding-top: 50vh;\r\n  background: url(${props => props.backdrop}) no-repeat;\r\n  background-size: cover;\r\n  background-position: center;\r\n`\r\n\r\nconst MovieInfo = styled.div`\r\n  background: white;\r\n  text-align: left;\r\n  padding: 2rem 10%;\r\n  > div {\r\n    margin-left: 20px;\r\n  }\r\n  img {\r\n    position: relative;\r\n    top: -5rem;\r\n  }\r\n`\r\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\nimport './App.css'\nimport logo from './logo.svg'\nimport MoviesList from './components/MoviesList'\nimport MovieDetail from './components/MovieDetail'\n\nconst App = () => {\n  return (\n    <Router>\n      <div className='App'>\n        <header className='App-header'>\n          <Link to='/'>\n            <img src={logo} className='App-logo' alt='logo' />\n          </Link>\n        </header>\n        <Switch>\n          <Route exact path='/' component={MoviesList} />\n          <Route path='/:id' component={MovieDetail} />\n        </Switch>\n      </div>\n    </Router>\n    // <Router>\n    //   <div className='App'>\n    //     <header className='App-header'>\n    //       <Link to='/'>\n    //         <img src={logo} className='App-logo' alt='logo' />\n    //       </Link>\n    //     </header>\n    //     <Switch>\n    //       <Route exact path='/' component={MoviesList} />\n    //       <Route path='/:id' component={MovieDetail} />\n    //     </Switch>\n    //   </div>\n    // </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}